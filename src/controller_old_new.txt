use crate::interface::{RobotError, RobotState, OCTService, OCTError, Move, Robot}; //OCTError;
use tokio::sync::mpsc;
use tokio::time::{sleep, Duration, Instant};
use crate::robot::RobotArm;
use std::sync::{Mutex, Arc}; //Arc;
use std::collections::VecDeque;

const CALIBRATION_SAMPLES: u64 = 1_000;
const MAX_ESTIMATE_SAMPLES: u64 = 500;
const MAX_DISTANCES: u64 = 100;
const MAX_STATES: u64 = 100;

#[derive(PartialEq, Clone, Copy)]
enum ControllerState {
    Dead,
    OutOfBrainUncalibrated,
    OutOfBrainCalibrated,
    InBrain
}

#[derive(PartialEq, Clone, Copy)]
enum ControllerSubstate {
    Localizing,
    Purgatory,
    Normal,
    Panic
}

pub struct Controller {
    current_state: Arc<Mutex<ControllerState>>, //ControllerState,
    current_substate: Arc<Mutex<ControllerSubstate>>, //ControllerSubstate,
    distance_queue: Arc<Mutex<VecDeque<Result<u64, OCTError>>>>, //VecDeque<(Result<u64, OCTError>, Instant>>>,
    distance_time_queue: Arc<Mutex<VecDeque<Instant>>>,
    robot_queue: Arc<Mutex<VecDeque<Result<RobotState, RobotError>>>>, //VecDeque<(Result<RobotState, RobotError>, Instant>>>,
    robot_time_queue: Arc<Mutex<VecDeque<Instant>>>,
    robot: Box<RobotArm>,
}

impl Controller {
    pub fn new() -> Controller {
        Controller {
            current_state: Arc::new(Mutex::new(ControllerState::Dead)), //ControllerState::Dead,
            current_substate: Arc::new(Mutex::new(ControllerSubstate::Normal)), //ControllerSubstate::Normal,
            distance_queue: Arc::new(Mutex::new(VecDeque::new())), //VecDeque::new(),
            robot_queue: Arc::new(Mutex::new(VecDeque::new())), //VecDeque::new(),
            robot: Box::new(RobotArm{arm: "arm".to_string()}),
            distance_time_queue: Arc::new(Mutex::new(VecDeque::new())), //VecDeque::new(),
            robot_time_queue: Arc::new(Mutex::new(VecDeque::new())),
        }
    }

    fn in_brain(&self) -> bool {
        let state_changer = self.current_state.lock().unwrap();
        *state_changer == ControllerState::InBrain
    }

    fn out_of_brain(&self) -> bool {
        let state_changer = self.current_state.lock().unwrap();
        *state_changer == ControllerState::OutOfBrainCalibrated || *state_changer == ControllerState::OutOfBrainUncalibrated
    }

    fn is_stationary(self: Arc<Self>) -> bool{
        true
    }

    fn panic(self: Arc<Self>) {
        let mut state_changer = self.current_state.lock().unwrap();
        *state_changer = ControllerState::Dead;
    }

    fn is_dead(self: Arc<Self>) -> bool {
        let state_changer = self.current_state.lock().unwrap();
        *state_changer == ControllerState::Dead
    }

    async fn poll_surface_distance(self: Arc<Self>, tx: mpsc::Sender<Result<u64, OCTError>>) {
        loop {
            println!("Polling: Calling get_distance...");
            let tx_clone = tx.clone();
            // Spawn a task to fetch the distance without blocking the polling loop
            tokio::spawn({let me = Arc::clone(&self); 
                async move {
                let distance = me.robot.get_surface_distance().await;
                match distance {
                    Ok(distance) => println!("Fetched distance: {}", distance),
                    Err(_) => println!("Error in fetch distance"),
                }
                let temp = distance.clone();
                if tx_clone.send(temp).await.is_err() {
                    println!("Receiver dropped, stopping polling.");
                }
            }});
            // Wait for 5 seconds before polling again
            sleep(Duration::from_millis(5)).await;
        }
    }

    async fn process_distances(self: Arc<Self>, mut rx: mpsc::Receiver<Result<u64, OCTError>>) {
        while let Some(distance) = rx.recv().await {
            match distance {
                Ok(distance) => {
                    println!("Processing distance: {}", distance);
                }
                Err(_) => {
                    println!("Received error in processing distance");
                }
            };
            {
                let mut queue = self.distance_queue.lock().unwrap();
                queue.push_back(distance);
                if queue.len() > MAX_DISTANCES.try_into().unwrap() {
                    queue.pop_front();
                }

                let mut queue = self.distance_time_queue.lock().unwrap();
                queue.push_back(Instant::now());
                if queue.len() > MAX_DISTANCES.try_into().unwrap() {
                    queue.pop_front();
                }
            }
        }
    }

    async fn process_robot_state(self: Arc<Self>) {
        loop{
            let robot_state = self.robot.get_robot_state().await;
            match robot_state {
                Ok(state) => {
                    println!("Processing robot state: {:?}", state);
                }
                Err(RobotError::ConnectionError{..}) | Err(RobotError::MoveError{..}) => {
                    println!("Received error in processing robot state");
                }
                Err(RobotError::PositionError{..}) => {
                    self.clone().panic();
                }
            };
            {
                let mut queue = self.robot_queue.lock().unwrap();
                queue.push_back(robot_state); //robot_state);
                if queue.len() > MAX_STATES.try_into().unwrap() {
                    queue.pop_front();
                }

                let mut queue = self.robot_time_queue.lock().unwrap();
                queue.push_back(Instant::now()); //robot_state);
                if queue.len() > MAX_STATES.try_into().unwrap() {
                    queue.pop_front();
                }
            }
        }
    }


    pub async fn start(self: Arc<Self>) {
        println!("Starting controller...");
        let (tx, rx) = mpsc::channel::<Result<u64, OCTError>>(20);
        tokio::spawn({let me = Arc::clone(&self);
        async move {
            me.poll_surface_distance(tx).await;
        }});
        println!("Starting to process distances...");
        tokio::spawn({let me = Arc::clone(&self);
            async move {
                me.process_distances(rx).await;
            }});
        
        {
            let mut state_changer = self.current_state.lock().unwrap();
            *state_changer = ControllerState::OutOfBrainCalibrated;
        }
        while !self.is_dead() {
            sleep(Duration::from_millis(100)).await;
        }
    }



    // fn predict_position(&self) -> RobotState {
    //     None
    // }

    // fn update_position(&mut self) {}

    // async fn calibrate(&mut self) {}

    // fn predict_oct(&self) {}

    // fn update_oct(&mut self) {}

    async fn move_oob(self: Arc<Self>, position: u64, next_state: ControllerState, next_substate: ControllerSubstate) -> () {

        while self.out_of_brain() {
            let response = self.robot.command_move(&Move::InserterZ(position)).await;
            match response {
                Ok(_) => {
                    println!("Moved to position: {}", position);
                    break;
                }
                Err(RobotError::MoveError{..}) | Err(RobotError::ConnectionError{..}) => {
                    println!("Error in moving to position: {}", position);

                }
                Err(RobotError::PositionError{..}) => {
                    self.clone().panic();
                }
            }
        }
        self.transition_state(next_state, next_substate);
    }

    fn transition_state(&mut self, next_state: ControllerState, next_substate: ControllerSubstate) {}

}

